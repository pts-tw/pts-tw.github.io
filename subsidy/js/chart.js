// Generated by LiveScript 1.3.0
(function(){
  var data, cols, svg, width, height, box, p, fsize, sw, doit, tick, path, maxv;
  data = datasrc.money;
  cols = ['#f00', '#f90', '#ff0', '#9f0', '#0f0', '#0f9', '#09f', '#00f'];
  cols = ['#4E257B', '#DF3A93'];
  svg = ld$.find(document, '[ld=chart1]', 0);
  width = 130;
  height = 80;
  box = svg.getBoundingClientRect();
  import$({
    width: width,
    height: height
  }, box);
  width = box.width - 20;
  height = box.height - 50;
  p = 2;
  fsize = 10;
  sw = 0.5;
  doit = function(opt){
    var i, j, val, sum, ti, tj, maxv, total, attr, axis1, size1, axis2, size2, rect;
    opt == null && (opt = {});
    i = opt.i, j = opt.j, val = opt.val, sum = opt.sum, ti = opt.ti, tj = opt.tj, maxv = opt.maxv, total = opt.total;
    attr = {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
    axis1 = function(o){
      return o.i * (width - p) / o.ti + p;
    };
    size1 = function(o){
      var ref$;
      return (ref$ = (width - p) / o.ti - p) > 0 ? ref$ : 0;
    };
    axis2 = function(o){
      return o.sum * height / o.maxv;
    };
    size2 = function(o){
      return o.val * height / o.maxv;
    };
    axis2 = function(o){
      return height - (o.sum + o.val) * height / o.maxv;
    };
    axis2 = function(o){
      return height - (o.sum + o.val) * height / o.total;
    };
    size2 = function(o){
      return o.val * height / o.total;
    };
    axis2 = function(o){
      return o.i * (height - p) / o.ti + p;
    };
    size2 = function(o){
      var ref$;
      return (ref$ = (height - p) / o.ti - p) > 0 ? ref$ : 0;
    };
    axis1 = function(o){
      return 40 + o.sum * width / o.maxv;
    };
    size1 = function(o){
      return o.val * width / o.maxv;
    };
    import$(attr, {
      x: axis1(opt),
      y: axis2(opt),
      width: size1(opt),
      height: size2(opt)
    });
    import$(attr, {
      fill: cols[j % cols.length]
    });
    return svg.appendChild(rect = ld$.create({
      ns: 'svg',
      name: 'rect',
      attr: attr
    }));
  };
  tick = function(opt){
    var i, val, axis1, axis2, attrG, attr, g, text;
    opt == null && (opt = {});
    i = opt.i, val = opt.val;
    axis1 = function(o){
      return +((width - p) / o.ti) * 0.5 + o.i * (width - p) / o.ti + p;
    };
    axis2 = function(o){
      return height + 3;
    };
    axis2 = function(o){
      return ((height - p) / o.ti) * 0.5 + o.i * (height - p) / o.ti + p;
    };
    axis1 = function(o){
      return 30;
    };
    attrG = {
      transform: "translate(" + axis1(opt) + "," + axis2(opt) + ")"
    };
    attr = {
      "font-size": fsize,
      dy: "0.3em",
      "text-anchor": "end"
    };
    svg.appendChild(g = ld$.create({
      ns: 'svg',
      name: 'g',
      attr: attrG
    }));
    g.appendChild(text = ld$.create({
      ns: 'svg',
      name: 'text',
      attr: attr
    }));
    return text.textContent = val;
  };
  [0, 1, 2, 3, 4].map(function(d, i){
    var x, line, text;
    x = 40 + d * width / 4;
    line = ld$.create({
      ns: 'svg',
      name: 'path',
      attr: {
        d: "M" + x + " 0 L " + x + " " + height,
        stroke: '#000',
        "stroke-width": sw
      }
    });
    svg.appendChild(line);
    text = ld$.create({
      ns: 'svg',
      name: 'text',
      attr: {
        x: x,
        y: height + fsize,
        "font-size": fsize,
        "text-anchor": "middle"
      }
    });
    text.textContent = d * 5 + "å„„";
    return svg.appendChild(text);
  });
  svg.appendChild(path = ld$.create({
    ns: 'svg',
    name: 'path',
    attr: {
      d: "M40 " + height + " L" + width + " " + height,
      stroke: '#000',
      "stroke-width": sw
    }
  }));
  maxv = Math.max.apply(null, data.map(function(it){
    return Math.max(it.pty, it.idv);
  }));
  return data.map(function(d, i){
    var data2, sum, total;
    data2 = [d.pty, d.idv];
    sum = 0;
    total = data2.reduce(function(a, b){
      return a + b;
    }, 0);
    tick({
      i: i,
      val: d.year,
      ti: data.length
    });
    return data2.map(function(val, j){
      doit({
        val: val,
        i: i,
        j: j,
        sum: sum,
        ti: data.length,
        tj: data2.length,
        maxv: maxv,
        total: total
      });
      return sum += val;
    });
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}