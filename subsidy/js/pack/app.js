// Generated by LiveScript 1.3.0
(function(){
  ldc.register('who', [], function(){
    var lc, view;
    lc = {
      target: {}
    };
    view = new ldView({
      root: '[ld-scope=who]',
      handler: {
        avatar: function(arg$){
          var node;
          node = arg$.node;
          return node.style.backgroundImage = "url(" + siteroot + "assets/img/cand/img_leaderboard_" + lc.num + ".png)";
        },
        name: function(arg$){
          var node;
          node = arg$.node;
          return node.textContent = lc.target.name;
        },
        list: {
          list: function(){
            return lc.target.list;
          },
          handle: function(arg$){
            var node, data, mark, title, amount, val;
            node = arg$.node, data = arg$.data;
            mark = ld$.find(node, '[ld=mark]', 0);
            title = ld$.find(node, '[ld=title]', 0);
            amount = ld$.find(node, '[ld=amount]', 0);
            title.textContent = data.title;
            val = Math.round(data.amount / 1000000) * 1000000;
            amount.textContent = numconvert.a2c(val, {
              partial: true
            });
            return mark.style.backgroundImage = "url(" + siteroot + "assets/img/party/ic_" + data.party + ".png)";
          }
        }
      }
    });
    return ldc.action({
      show: function(name, num){
        var promise;
        promise = !lc.cache
          ? ld$.fetch(siteroot + "assets/data/who.json", {
            method: 'GET'
          }, {
            type: 'json'
          })
          : Promise.resolve(lc.cache);
        return promise.then(function(data){
          var ret;
          lc.cache = data;
          if (!(ret = data.filter(function(it){
            return it.name === name;
          })[0])) {
            return;
          }
          lc.target = ret;
          lc.num = num;
          view.render();
          return lda.ldcvmgr.toggle('who');
        });
      }
    });
  });
  ldc.register('interview', [], function(){
    var lc, view;
    lc = {
      target: {}
    };
    view = new ldView({
      root: '[ld-scope=interview]',
      handler: {
        avatar: function(arg$){
          var node;
          node = arg$.node;
        },
        name: function(arg$){
          var node;
          node = arg$.node;
          return node.textContent = lc.target.name;
        },
        title: function(arg$){
          var node;
          node = arg$.node;
          return node.textContent = lc.target.title;
        },
        brief: function(arg$){
          var node;
          node = arg$.node;
          return node.textContent = lc.target.brief;
        },
        content: function(arg$){
          var node;
          node = arg$.node;
          return node.innerHTML = (lc.target.html || '').replace(/\n/g, '');
        }
      }
    });
    return ldc.action({
      video: function(){
        var iframe;
        if (!(iframe = ld$.find(document, '.ldcvmgr[data-name=video] iframe', 0))) {
          return;
        }
        iframe.setAttribute('src', lc.target.video);
        return lda.ldcvmgr.get('video').then(function(){
          return iframe.setAttribute('src', 'about:blank');
        });
      },
      show: function(name){
        var promise;
        promise = !lc.cache
          ? ld$.fetch(siteroot + "assets/data/interview.json", {
            method: 'GET'
          }, {
            type: 'json'
          })
          : Promise.resolve(lc.cache);
        return promise.then(function(data){
          var ret, modal;
          lc.cache = data;
          if (!(ret = data.filter(function(it){
            return it.name === name;
          })[0])) {
            return;
          }
          lc.target = ret;
          view.render();
          lda.ldcvmgr.toggle('interview');
          modal = ld$.find(document, '.ldcvmgr[data-name=interview]', 0);
          if (modal) {
            return setTimeout(function(){
              return modal.scrollTop = 0;
            }, 100);
          }
        });
      }
    });
  });
  ldc.register('history', [], function(){
    var lc, data, list, step, view;
    lc = {
      idx: 0
    };
    data = datasrc.history;
    list = data.map(function(it){
      return it.year - 1911;
    });
    step = function(dir){
      var ref$, isEnd, x$;
      dir == null && (dir = 1);
      lc.idx = (ref$ = lc.idx + dir) > 0 ? ref$ : 0;
      isEnd = lc.idx === list.length;
      view.get('read').classList.toggle('d-none', isEnd);
      view.get('end').classList.toggle('d-none', !isEnd);
      if (!isEnd) {
        x$ = view.get('illustration');
        x$.setAttribute('src', siteroot + "assets/img/history/history_img_" + list[lc.idx] + ".png");
        x$.classList.add('d-none');
        debounce(10).then(function(){
          return view.get('illustration').classList.remove('d-none');
        });
        view.get('year').innerHTML = "民國<br>" + (data[lc.idx].year - 1911) + "年" + (lc.idx === list.length - 1 ? '<br>迄今' : '');
        return view.get('desc').textContent = data[lc.idx].desc + "";
      }
    };
    ldc.action({
      show: function(){
        lc.idx = 0;
        step(0);
        return lda.ldcvmgr.get('history').then(function(){
          return lc.idx = 0;
        });
      }
    });
    return view = new ldView({
      root: '[ld-scope=history]',
      action: {
        click: {
          prev: function(arg$){
            var node;
            node = arg$.node;
            return step(-1);
          },
          next: function(arg$){
            var node;
            node = arg$.node;
            return step(1);
          }
        }
      },
      handler: {
        illustration: function(arg$){
          var node;
          node = arg$.node;
        },
        year: function(){},
        desc: function(){}
      }
    });
  });
  ldc.register('main', ['ldcvmgr', 'history', 'interview', 'who', 'parallax', 'nav'], function(){
    var lc, update, view;
    lc = {
      vote: {}
    };
    lc.vote = {
      target: '蔡英文',
      cand: {}
    };
    update = function(){
      var list, item;
      list = view.getAll('section').map(function(it){
        return [it.getAttribute('data-value'), it.getBoundingClientRect().top];
      }).filter(function(it){
        return it[1] <= window.innerHeight;
      });
      list.sort(function(a, b){
        return b[1] - a[1];
      });
      item = list[0];
      if (!item) {
        return;
      }
      return view.getAll('hint').map(function(it){
        return it.classList.toggle('active', it.getAttribute('data-value') === item[0]);
      });
    };
    ld$.fetch('https://pts.tellstory.io/e/vote', {
      method: 'GET'
    }, {
      type: 'json'
    }).then(function(ret){
      var k, v;
      ret.map(function(it){
        var ref$, key$;
        return ((ref$ = lc.vote.cand)[key$ = it.name] || (ref$[key$] = {})).count = isNaN(+it.count)
          ? '???'
          : it.count;
      });
      lc.vote.max = Math.max.apply(null, (function(){
        var ref$, results$ = [];
        for (k in ref$ = lc.vote.cand) {
          v = ref$[k];
          results$.push(v.count);
        }
        return results$;
      }()));
      return view.render(['vote-count-total', 'vote-count', 'vote-money']);
    });
    lc.obs = new IntersectionObserver(update, {
      root: null
    });
    view = new ldView({
      root: document,
      action: {
        click: {
          vote: function(arg$){
            var node, key;
            node = arg$.node;
            key = node.getAttribute('data-value');
            lc.vote.target = {
              "song": "宋楚瑜",
              "fish": "韓國瑜",
              "tsai": "蔡英文"
            }[key];
            lc.vote.key = key;
            view.getAll('vote-ani').map(function(it){
              return it.classList.toggle('d-none', true);
            });
            view.get('vote-result').classList.remove('d-none');
            scrollto('#vote-result', 500, 0);
            ld$.fetch('https://pts.tellstory.io/e/vote', {
              method: 'POST'
            }, {
              type: 'json',
              json: {
                v: lc.vote.target
              }
            })['catch'](function(){});
            setTimeout(function(){
              return view.getAll('vote-ani').map(function(it){
                return it.classList.toggle('d-none', false);
              });
            }, 500);
            return view.render();
          },
          hint: function(arg$){
            var node, name, n;
            node = arg$.node;
            name = node.getAttribute('data-value');
            n = view.getAll('section').filter(function(it){
              return it.getAttribute('data-value') === name;
            })[0];
            if (!n) {
              return;
            }
            return scrollto(n, 500);
          }
        }
      },
      init: {
        url: function(arg$){
          var node;
          node = arg$.node;
          return node.value = window.location.href;
        },
        section: function(arg$){
          var node;
          node = arg$.node;
          return lc.obs.observe(node);
        },
        copylink: function(arg$){
          var node, c;
          node = arg$.node;
          c = new ClipboardJS(node);
          return c.on('success', function(){
            node.classList.add('tip-on');
            return setTimeout(function(){
              return node.classList.remove('tip-on');
            }, 2000);
          });
        }
      },
      handler: {
        "vote-cand": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', node.getAttribute('data-value') === lc.vote.target);
        },
        "vote-target-portrait": function(arg$){
          var node;
          node = arg$.node;
          if (!lc.vote.key) {
            return;
          }
          return node.style.backgroundImage = "url(" + siteroot + "assets/img/cand/top/img_candidate_" + lc.vote.key + ".png)";
        },
        "vote-target-count": function(arg$){
          var node, ref$, key$;
          node = arg$.node;
          return node.textContent = ((ref$ = lc.vote.cand)[key$ = lc.vote.target] || (ref$[key$] = {})).count || 0;
        },
        "vote-target-name": function(arg$){
          var node;
          node = arg$.node;
          return node.textContent = lc.vote.target;
        },
        "vote-count": function(arg$){
          var node, cand, ref$, key$;
          node = arg$.node;
          cand = (ref$ = lc.vote.cand)[key$ = node.getAttribute('data-value')] || (ref$[key$] = {});
          return node.textContent = cand.count != null ? cand.count : '...';
        },
        "vote-money": function(arg$){
          var node, cand, ref$, key$, v;
          node = arg$.node;
          cand = (ref$ = lc.vote.cand)[key$ = node.getAttribute('data-value') || lc.vote.target] || (ref$[key$] = {});
          return node.textContent = cand.count != null ? cand.count >= lc.vote.max / 3 ? (v = cand.count * 30, numconvert.a2c(v, {
            partial: ['億', '萬']
          })) : 0 : '...';
        },
        "vote-count-total": function(arg$){
          var node, ret, k, v;
          node = arg$.node;
          ret = (function(){
            var ref$, results$ = [];
            for (k in ref$ = lc.vote.cand) {
              v = ref$[k];
              results$.push([k, v]);
            }
            return results$;
          }()).map(function(it){
            return it[1].count;
          }).reduce(function(a, b){
            return a + b;
          }, 0);
          return node.textContent = isNaN(ret) ? '...' : ret;
        }
      }
    });
    return ld$.find(document, '.sticky').map(function(){
      return stickybits('.sticky');
    });
  });
  return ldc.app('main');
})();// Generated by LiveScript 1.3.0
(function(){
  var data, cols, svg, width, height, box, p, fsize, sw, doit, tick, path, maxv;
  data = datasrc.money;
  cols = ['#f00', '#f90', '#ff0', '#9f0', '#0f0', '#0f9', '#09f', '#00f'];
  cols = ['#4E257B', '#DF3A93'];
  svg = ld$.find(document, '[ld=chart1]', 0);
  width = 130;
  height = 80;
  box = svg.getBoundingClientRect();
  import$({
    width: width,
    height: height
  }, box);
  width = box.width - 20;
  height = box.height - 50;
  p = 2;
  fsize = 10;
  sw = 0.5;
  doit = function(opt){
    var i, j, val, sum, ti, tj, maxv, total, attr, axis1, size1, axis2, size2, rect;
    opt == null && (opt = {});
    i = opt.i, j = opt.j, val = opt.val, sum = opt.sum, ti = opt.ti, tj = opt.tj, maxv = opt.maxv, total = opt.total;
    attr = {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
    axis1 = function(o){
      return o.i * (width - p) / o.ti + p;
    };
    size1 = function(o){
      var ref$;
      return (ref$ = (width - p) / o.ti - p) > 0 ? ref$ : 0;
    };
    axis2 = function(o){
      return o.sum * height / o.maxv;
    };
    size2 = function(o){
      return o.val * height / o.maxv;
    };
    axis2 = function(o){
      return height - (o.sum + o.val) * height / o.maxv;
    };
    axis2 = function(o){
      return height - (o.sum + o.val) * height / o.total;
    };
    size2 = function(o){
      return o.val * height / o.total;
    };
    axis2 = function(o){
      return o.i * (height - p) / o.ti + p;
    };
    size2 = function(o){
      var ref$;
      return (ref$ = (height - p) / o.ti - p) > 0 ? ref$ : 0;
    };
    axis1 = function(o){
      return 40 + o.sum * width / o.maxv;
    };
    size1 = function(o){
      return o.val * width / o.maxv;
    };
    import$(attr, {
      x: axis1(opt),
      y: axis2(opt),
      width: size1(opt),
      height: size2(opt)
    });
    import$(attr, {
      fill: cols[j % cols.length]
    });
    return svg.appendChild(rect = ld$.create({
      ns: 'svg',
      name: 'rect',
      attr: attr
    }));
  };
  tick = function(opt){
    var i, val, axis1, axis2, attrG, attr, g, text;
    opt == null && (opt = {});
    i = opt.i, val = opt.val;
    axis1 = function(o){
      return +((width - p) / o.ti) * 0.5 + o.i * (width - p) / o.ti + p;
    };
    axis2 = function(o){
      return height + 3;
    };
    axis2 = function(o){
      return ((height - p) / o.ti) * 0.5 + o.i * (height - p) / o.ti + p;
    };
    axis1 = function(o){
      return 30;
    };
    attrG = {
      transform: "translate(" + axis1(opt) + "," + axis2(opt) + ")"
    };
    attr = {
      "font-size": fsize,
      dy: "0.3em",
      "text-anchor": "end"
    };
    svg.appendChild(g = ld$.create({
      ns: 'svg',
      name: 'g',
      attr: attrG
    }));
    g.appendChild(text = ld$.create({
      ns: 'svg',
      name: 'text',
      attr: attr
    }));
    return text.textContent = val;
  };
  [0, 1, 2, 3, 4].map(function(d, i){
    var x, line, text;
    x = 40 + d * width / 4;
    line = ld$.create({
      ns: 'svg',
      name: 'path',
      attr: {
        d: "M" + x + " 0 L " + x + " " + height,
        stroke: '#000',
        "stroke-width": sw
      }
    });
    svg.appendChild(line);
    text = ld$.create({
      ns: 'svg',
      name: 'text',
      attr: {
        x: x,
        y: height + fsize,
        "font-size": fsize,
        "text-anchor": "middle"
      }
    });
    text.textContent = d * 5 + "億";
    return svg.appendChild(text);
  });
  svg.appendChild(path = ld$.create({
    ns: 'svg',
    name: 'path',
    attr: {
      d: "M40 " + height + " L" + width + " " + height,
      stroke: '#000',
      "stroke-width": sw
    }
  }));
  maxv = Math.max.apply(null, data.map(function(it){
    return Math.max(it.pty, it.idv);
  }));
  return data.map(function(d, i){
    var data2, sum, total;
    data2 = [d.pty, d.idv];
    sum = 0;
    total = data2.reduce(function(a, b){
      return a + b;
    }, 0);
    tick({
      i: i,
      val: d.year,
      ti: data.length
    });
    return data2.map(function(val, j){
      doit({
        val: val,
        i: i,
        j: j,
        sum: sum,
        ti: data.length,
        tj: data2.length,
        maxv: maxv,
        total: total
      });
      return sum += val;
    });
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}// Generated by LiveScript 1.3.0
(function(){
  var preset, presetName, election, party, mark;
  preset = datasrc.suggest.map(function(d, i){
    return d.list.map(function(it){
      return [it.name, it.election, it.party, it.money];
    });
  });
  presetName = datasrc.suggest.map(function(it){
    return it.name;
  });
  election = ["第09任總統(副總統)選舉", "第10任總統(副總統)選舉", "第11任總統(副總統)選舉", "第12任總統(副總統)選舉", "第13任總統(副總統)選舉", "第14任總統(副總統)選舉", "第 03 屆立法委員選舉", "第 04 屆立法委員選舉", "第 05 屆立法委員選舉", "第 06 屆立法委員選舉", "第 07 屆立法委員選舉", "第 08 屆立法委員選舉", "第 09 屆立法委員選舉", "第7屆立委補選", "第8屆立委補選", "第9屆立委補選", "第 03 屆國大代表選舉", "83年臺灣省長選舉", "103年縣市議員選舉", "107年縣市議員選舉", "87年縣市議員選舉", "91年縣市議員選舉", "94年縣市議員選舉", "98年縣市議員選舉", "83年臺灣省議員選舉", "90年縣市長選舉", "86年縣市長選舉", "98年縣市長選舉", "103年縣市長選舉", "107年縣市長選舉", "83年直轄市議員選舉", "87年直轄市議員選舉", "91年直轄市議員選舉", "95年直轄市議員選舉", "99年直轄市議員選舉", "103年直轄市市議員選舉", "107年直轄市市議員選舉", "107年直轄市長選舉", "99年直轄市長選舉", "103年直轄市長選舉", "91年直轄市長選舉", "87年直轄市長選舉", "95年直轄市長選舉", "83年直轄市長選舉", "107年直轄市區民代表選舉", "103年直轄市區民代表選舉", "107年直轄市區長選舉", "103年直轄市區長選舉", "107年鄉鎮市民代表選舉", "103年鄉鎮市民代表選舉", "99年鄉鎮市民代表選舉", "107年鄉鎮市長選舉", "103年鄉鎮市長選舉", "98年鄉鎮市長選舉", "94年鄉鎮市長選舉", "91年鄉鎮市長選舉", "87年鄉鎮市長選舉", "103年村里長選舉", "107年村里長選舉", "99年縣市村里長選舉"];
  party = ["中國國民黨", "連署", "民主進步黨", "新黨", "無黨籍及未經政黨推薦", "親民黨", "全國民主非政黨聯盟", "無", "勞動黨", "民主聯盟", "新國家連線", "建國黨", "中國青年黨", "綠色本土清新黨", "國家民主黨", "台灣團結聯盟", "台灣吾黨", "大中華統一陣線", "臺灣慧行志工黨", "綠黨", "無黨團結聯盟", "工教聯盟", "大道慈悲濟世黨", "公民黨", "客家黨", "制憲聯盟", "台灣農民黨", "紅黨", "第三社會黨", "世界和平黨", "民主自由黨", "洪運忠義黨", "健保免費連線", "中華台商愛國黨", "人民最大黨", "台灣主義黨", "台灣國民會議", "人民民主陣線", "中華民國臺灣基本法連線", "正黨", "時代力量", "民國黨", "綠黨社會民主黨聯盟", "中華統一促進黨", "樹黨", "軍公教聯盟黨", "台灣工黨", "自由台灣黨", "泛盟黨", "勞工黨", "大愛憲改聯盟", "台灣獨立黨", "信心希望聯盟", "和平鴿聯盟黨", "台灣未來黨", "中華民國機車黨", "社會福利黨", "全民的黨", "全民無黨聯盟", "聯合黨", "金門高粱黨", "先進黨", "台灣民族黨", "大道人民黨", "中華民族致公黨", "皇君人民政黨", "全民生活政策黨", "社會改革黨", "保護台灣大聯盟", "台灣國民黨", "教科文預算保障e聯盟", "中國忠義黨", "中國婦女黨", "中國民眾黨", "台灣建國聯盟", "華聲黨", "中華民主向日葵憲政改革聯盟", "臺灣建國黨", "社會民主黨", "基進黨", "臺灣人民共產黨", "愛心黨", "左翼聯盟", "中國民主進步黨", "新政世紀黨", "人民民主黨", "台灣整復師聯盟工黨", "青年陽光黨", "中華民國國政監督聯盟", "三等國民公義人權自救黨", "新華勞動黨", "中國生產黨", "中國台灣原住民黨", "台灣第一民族黨", "新生黨", "華裔和合黨", "臺灣前進黨", "天宙和平統一家庭黨", "中華文化民主黨", "中國國家社會主義勞工黨", "台灣進步黨", "經濟黨", "聾國黨", "全國人民黨", "世界大同黨", "農民黨", "正義聯盟", "台灣學習黨"];
  mark = {
    0: "kmt",
    2: "dpp",
    3: "np",
    5: "pfp",
    15: "tsu",
    40: "npp"
  };
  ldc.register('explore', ['ldcvmgr', 'loader', 'nav'], function(arg$){
    var ldcvmgr, loader, nav, ldld, lc, render, view;
    ldcvmgr = arg$.ldcvmgr, loader = arg$.loader, nav = arg$.nav;
    ldld = new ldLoader({
      className: "full ldld"
    });
    lc = {};
    render = function(){
      var list, res$, k;
      lc.hash = {};
      list = (lc.all || []).filter(function(it){
        if (lc.election != null && it[1] !== lc.election) {
          return false;
        }
        if (lc.party != null && it[2] !== lc.party) {
          return false;
        }
        return true;
      });
      list.map(function(it){
        var ref$, key$;
        return ((ref$ = lc.hash)[key$ = it[0]] || (ref$[key$] = [])).push(it);
      });
      res$ = [];
      for (k in lc.hash) {
        res$.push(k);
      }
      lc.names = res$;
      view.get('election-toggle').textContent = election[lc.election] != null ? election[lc.election] : "請選擇選舉名稱";
      view.get('party-toggle').textContent = party[lc.party] != null ? party[lc.party] : "請選擇政黨";
      view.render();
      return ldld.off();
    };
    ldc.action({
      preset: function(n){
        lc.election = undefined;
        lc.party = undefined;
        view.get('search').value = '';
        lc.all = preset[+n];
        render();
        return scrollto('#list', 150);
      },
      election: function(){
        return lda.ldcvmgr.get('choose-election').then(function(it){
          if (!(it != null)) {
            return lc.election = undefined;
          } else {
            return lc.election = +it;
          }
        }).then(function(){
          return render();
        });
      },
      party: function(){
        return lda.ldcvmgr.get('choose-party').then(function(it){
          if (!(it != null)) {
            return lc.party = undefined;
          } else {
            return lc.party = +it;
          }
        }).then(function(){
          return render();
        });
      }
    });
    return view = new ldView({
      root: "[ld-scope=explore]",
      action: {
        input: {
          search: debounce(function(arg$){
            var node;
            node = arg$.node;
            ldld.on();
            return debounce(100).then(function(){
              return ld$.fetch(siteroot + "assets/data/name/" + node.value.charAt(0) + ".json", {
                method: 'GET'
              }, {
                type: 'json'
              });
            }).then(function(list){
              lc.all = list.filter(function(it){
                return it[0].startsWith(node.value);
              });
              return render();
            })['catch'](function(){
              lc.all = [];
              return render();
            });
          })
        }
      },
      handler: {
        preset: {
          list: function(){
            return presetName;
          },
          handle: function(arg$){
            var node, data, idx;
            node = arg$.node, data = arg$.data, idx = arg$.idx;
            node.querySelector('[ld=name]').textContent = data;
            return node.addEventListener('click', function(){
              return lda.explore.preset(presetName.indexOf(data));
            });
          }
        },
        card: {
          list: function(){
            return (lc.names || []).map(function(it){
              return lc.hash[it];
            });
          },
          handle: function(arg$){
            var node, data, view;
            node = arg$.node, data = arg$.data;
            return view = new ldView({
              root: node,
              handler: {
                name: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.textContent = data[0][0];
                },
                list: {
                  list: function(){
                    return data;
                  },
                  handle: function(arg$){
                    var node, d, view;
                    node = arg$.node, d = arg$.data;
                    return view = new ldView({
                      root: node,
                      handler: {
                        mark: function(arg$){
                          var node, m;
                          node = arg$.node;
                          m = mark[d[2]] || 'other';
                          return node.style.backgroundImage = "url(" + siteroot + "assets/img/party/ic_" + m + ".png)";
                        },
                        title: function(arg$){
                          var node;
                          node = arg$.node;
                          return node.textContent = election[d[1]];
                        },
                        amount: function(arg$){
                          var node;
                          node = arg$.node;
                          return node.textContent = numconvert.a2c(d[3], {
                            partial: ['億', '萬']
                          }) + "元";
                        }
                      }
                    });
                  }
                }
              }
            });
          }
        }
      }
    });
  });
  return ldc.app("explore");
})();// Generated by LiveScript 1.3.0
(function(){
  return ldc.register('parallax', [], function(){
    var lc, order, name, subsidy, total, maxtotal, root, box, x$, svg, ymap, hmap, isMobile, queue, flush, animate, cb, bezier, running, handle, start, rects, labels, texts, labelRects, ticks, i$, len$, j, y, tick, i, n, g, label, text, rect, rs, j$, len1$, r, setTick, setLabel, setLabelRect, setLabelText, setRect, update;
    lc = {};
    order = ['kmt', 'dpp', 'new', 'pfp', 'tsu', 'npp'];
    name = [['#3CB59A', '民進黨'], ['#467DB4', '國民黨'], ['#F0753F', '親民黨'], ['#B4865D', '台聯'], ['#FFDD1F', '新黨'], ['#FCBE2E', '時代力量']];
    subsidy = [
      {
        year: 1995,
        value: [15660780, 21745445, 6114655, 0, 0, 0]
      }, {
        year: 1996,
        value: [15563680, 25904145, 7129480, 0, 0, 0]
      }, {
        year: 1997,
        value: [156607800, 217454450, 61146550, 0, 0, 0]
      }, {
        year: 1998,
        value: [445025100, 698951850, 106269750, 0, 0, 0]
      }, {
        year: 2001,
        value: [517161000, 442405650, 0, 287675400, 120234000, 0]
      }, {
        year: 2004,
        value: [694285800, 638016200, 0, 270122600, 151342400, 0]
      }, {
        year: 2008,
        value: [722021200, 1002160200, 0, 0, 0, 0]
      }, {
        year: 2012,
        value: [911284800, 1172655800, 0, 144417800, 235759400, 0]
      }, {
        year: 2016,
        value: [1074190600, 656189800, 102014800, 158967600, 0, 148863000]
      }
    ];
    subsidy.map(function(it){
      var v, i, v2;
      v = 0;
      return it.sum = (function(){
        var i$, results$ = [];
        for (i$ = 0; i$ < 6; ++i$) {
          i = i$;
          v2 = v;
          v += it.value[i];
          results$.push(v2);
        }
        return results$;
      }());
    });
    total = name.map(function(d, i){
      return subsidy.map(function(it){
        return it.value[i];
      }).reduce(function(a, b){
        return a + b;
      }, 0);
    });
    maxtotal = Math.max.apply(null, total);
    root = ld$.find(document, '#parallax', 0);
    box = root.getBoundingClientRect();
    x$ = root.style;
    x$.width = box.width + "px";
    x$.height = box.height + "px";
    svg = ld$.find(root, 'svg', 0);
    ymap = function(it){
      return 400 - 250 * it / 2000000000;
    };
    hmap = function(it){
      return 250 * it / 2000000000;
    };
    isMobile = function(){
      return window.innerWidth < 768;
    };
    window.addEventListener('scroll', function(){
      var n1, n2, box2, box1, size, dp, percent;
      n1 = ld$.find(document, '#parallax-start', 0);
      n2 = ld$.find(document, '#parallax-end', 0);
      box2 = n2.getBoundingClientRect();
      box1 = n1.getBoundingClientRect();
      box2.y = box2.top;
      box1.y = box1.top;
      size = box2.y - box1.y;
      dp = isMobile() ? 10 : 0;
      percent = 100 * (size - box2.y) / size + dp;
      if (percent < 18 && lc.step !== 1) {
        return update(1, false);
      } else if (percent >= 18 && percent < 33 && lc.step !== 2) {
        return update(2, false);
      } else if (percent >= 33 && percent < 50 && lc.step !== 3) {
        return update(3, false);
      } else if (percent >= 50 && lc.step !== 4) {
        return update(4, false);
      }
    });
    queue = [];
    flush = function(){
      return queue.splice(0, queue.length);
    };
    animate = function(node, e, dur){
      var ref$, s, t, k, v;
      dur == null && (dur = 330);
      ref$ = [{}, {}], s = ref$[0], t = ref$[1];
      for (k in e) {
        v = e[k];
        s[k] = node.getAttribute(k);
        if (!isNaN(+s[k])) {
          ref$ = ['number', +s[k], +e[k]], t[k] = ref$[0], s[k] = ref$[1], e[k] = ref$[2];
        } else if (!isNaN(ldColor.hsl(s[k]).a)) {
          ref$ = ['color', ldColor.hsl(s[k]), ldColor.hsl(e[k])], t[k] = ref$[0], s[k] = ref$[1], e[k] = ref$[2];
        } else if (/\d+/.exec(s[k])) {
          ref$ = ['numstr', new NumStr(s[k]), new NumStr(e[k])], t[k] = ref$[0], s[k] = ref$[1], e[k] = ref$[2];
        } else {
          ref$ = ['string', s[k], e[k]], t[k] = ref$[0], s[k] = ref$[1], e[k] = ref$[2];
        }
      }
      node.ani = {
        s: s,
        e: e,
        t: t,
        dur: dur,
        st: 0
      };
      if (!in$(node, queue)) {
        return queue.push(node);
      }
    };
    cb = [0.75, 0, 0.25, 1];
    bezier = function(t){
      return cubic.Bezier.y(cubic.Bezier.t(t, cb), cb);
    };
    running = false;
    handle = function(time){
      running = true;
      queue.map(function(n){
        var ref$, s, e, t, st, dur, percent, k, v, ce, cs, ci, results$ = [];
        if (!n.ani.st) {
          n.ani.st = time;
        }
        ref$ = n.ani, s = ref$.s, e = ref$.e, t = ref$.t, st = ref$.st, dur = ref$.dur;
        n.ani.percent = percent = bezier((ref$ = (time - st) / dur) < 1 ? ref$ : 1);
        for (k in s) {
          v = s[k];
          if (t[k] === 'number') {
            v = (e[k] - s[k]) * percent + s[k];
          } else if (t[k] === 'numstr') {
            v = NumStr.interpolate(s[k], e[k], percent);
          } else if (t[k] === 'color') {
            ce = ldColor.hsl(e[k]);
            cs = ldColor.hsl(s[k]);
            ci = {};
            ['h', 's', 'l', 'a'].map(fn$);
            v = ldColor.web(ci);
          } else {
            v = e[k];
          }
          results$.push(n.setAttribute(k, v));
        }
        return results$;
        function fn$(k){
          return ci[k] = (ce[k] - cs[k]) * percent + cs[k];
        }
      });
      queue = queue.filter(function(it){
        return it.ani.percent < 1;
      });
      if (queue.length) {
        return requestAnimationFrame(handle);
      } else {
        return running = false;
      }
    };
    start = function(){
      if (!running) {
        requestAnimationFrame(handle);
      }
      return running = true;
    };
    rects = [];
    labels = [];
    texts = [];
    labelRects = [];
    ticks = [];
    for (i$ = 0, len$ = subsidy.length; i$ < len$; ++i$) {
      j = i$;
      y = subsidy[i$];
      svg.appendChild(tick = ld$.create({
        ns: 'svg',
        name: 'text',
        attr: {
          'class': 'tick'
        }
      }));
      ticks.push(tick);
    }
    for (i$ = 0, len$ = name.length; i$ < len$; ++i$) {
      i = i$;
      n = name[i$];
      svg.appendChild(g = ld$.create({
        ns: 'svg',
        name: 'g',
        attr: {
          'class': 'group'
        }
      }));
      g.appendChild(label = ld$.create({
        ns: 'svg',
        name: 'g'
      }));
      label.appendChild(text = ld$.create({
        ns: 'svg',
        name: 'text'
      }));
      label.appendChild(rect = ld$.create({
        ns: 'svg',
        name: 'rect'
      }));
      labelRects.push(rect);
      labels.push(label);
      texts.push(text);
      rects.push(rs = []);
      for (j$ = 0, len1$ = subsidy.length; j$ < len1$; ++j$) {
        j = j$;
        y = subsidy[j$];
        g.appendChild(r = ld$.create({
          ns: 'svg',
          name: 'rect',
          attr: {
            fill: n[0]
          }
        }));
        rs.push(r);
      }
    }
    setTick = function(arg$){
      var step, node, j, year, init, attr;
      step = arg$.step, node = arg$.node, j = arg$.j, year = arg$.year, init = arg$.init;
      node.textContent = year.year;
      attr = {
        "font-size": isMobile() ? 20 : 16,
        x: (j + 0.5) * 472 / 9 + 20,
        y: 420,
        "text-anchor": "middle"
      };
      if (step <= 2) {
        attr.opacity = 0;
      }
      if (step === 3) {
        attr.opacity = 1;
      }
      if (init) {
        return ld$.attr(node, attr);
      } else {
        return animate(node, attr);
      }
    };
    setLabel = function(arg$){
      var step, node, i, name, year, val, init, attr;
      step = arg$.step, node = arg$.node, i = arg$.i, name = arg$.name, year = arg$.year, val = arg$.val, init = arg$.init;
      attr = step === 1
        ? {
          transform: "translate(" + (i * 75 + 43 + 25) + ",281)"
        }
        : step === 2
          ? {
            transform: "translate(" + (i * 75 + 43 + 25) + ",410)"
          }
          : {
            transform: "translate(" + (i * 30 + 166) + ",450)"
          };
      if (init) {
        return ld$.attr(node, attr);
      } else {
        return animate(node, attr);
      }
    };
    setLabelRect = function(arg$){
      var step, node, i, name, year, val, init, attr;
      step = arg$.step, node = arg$.node, i = arg$.i, name = arg$.name, year = arg$.year, val = arg$.val, init = arg$.init;
      attr = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        rx: 2,
        ry: 2,
        fill: name[0]
      };
      if (step >= 3) {
        import$(attr, {
          x: -8,
          y: -8,
          width: 16,
          height: 16
        });
      }
      if (init) {
        return ld$.attr(node, attr);
      } else {
        return animate(node, attr);
      }
    };
    setLabelText = function(arg$){
      var step, node, i, name, year, val, init, attr;
      step = arg$.step, node = arg$.node, i = arg$.i, name = arg$.name, year = arg$.year, val = arg$.val, init = arg$.init;
      if (step === 1) {
        node.textContent = name[1];
      } else {
        node.textContent = name[1].charAt(0);
      }
      attr = {
        "font-size": isMobile() ? 24 : 16,
        rotate: -90,
        dy: "0.5em",
        dx: "1.75em",
        transform: "rotate(90)"
      };
      if (init) {
        return ld$.attr(node, attr);
      } else {
        return animate(node, attr);
      }
    };
    setRect = function(arg$){
      var step, node, i, j, name, year, val, init, attr, ref$;
      step = arg$.step, node = arg$.node, i = arg$.i, j = arg$.j, name = arg$.name, year = arg$.year, val = arg$.val, init = arg$.init;
      attr = {};
      import$(attr, step === 1
        ? {
          rx: 10,
          ry: 10
        }
        : {
          rx: 0,
          ry: 0
        });
      import$(attr, {
        x: i * 75 + 43,
        y: 221,
        width: 50,
        height: 50,
        fill: name[0]
      });
      if (step === 2) {
        import$(attr, {
          y: 400 - val + (val / 9) * j,
          height: val / 9 + 1
        });
      }
      if (step >= 3) {
        import$(attr, {
          x: j * 472 / 9 + 20,
          width: 472 / 9 - 2,
          y: ymap(year.sum[i] + year.value[i]),
          height: (ref$ = hmap(year.value[i]) - 2) > 0 ? ref$ : 0
        });
      }
      if (step === 4) {
        import$(attr, {
          fill: i === 5 ? name[0] : '#ccc'
        });
      }
      if (init) {
        return ld$.attr(node, attr);
      } else {
        return animate(node, attr);
      }
    };
    update = function(step, init){
      var i$, ref$, len$, j, year, i, n, val, j$, ref1$, len1$;
      init == null && (init = false);
      svg.setAttribute('viewBox', isMobile() ? "-45 0 602 512" : "0 0 1024 512");
      lc.step = step;
      for (i$ = 0, len$ = (ref$ = subsidy).length; i$ < len$; ++i$) {
        j = i$;
        year = ref$[i$];
        setTick({
          step: step,
          node: ticks[j],
          year: year,
          j: j,
          init: init
        });
      }
      for (i$ = 0, len$ = (ref$ = name).length; i$ < len$; ++i$) {
        i = i$;
        n = ref$[i$];
        val = 350 * total[i] / maxtotal;
        setLabelText({
          step: step,
          node: texts[i],
          name: n,
          i: i,
          val: val,
          init: init
        });
        setLabelRect({
          step: step,
          node: labelRects[i],
          name: n,
          i: i,
          val: val,
          init: init
        });
        setLabel({
          step: step,
          node: labels[i],
          name: n,
          i: i,
          val: val,
          init: init
        });
        for (j$ = 0, len1$ = (ref1$ = subsidy).length; j$ < len1$; ++j$) {
          j = j$;
          year = ref1$[j$];
          setRect({
            step: step,
            node: rects[i][j],
            name: n,
            year: year,
            i: i,
            j: j,
            val: val,
            init: init
          });
        }
      }
      return start();
    };
    return update(1, true);
  });
})();
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}